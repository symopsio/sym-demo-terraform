# This file was generated by symflow CLI v8.0.2 on 2023-08-08 at 12:43 UTC.
# No changes to this file are required to start managing your AWS Lambda access with Sym.
# Modify this file to customize your AWS Lambda access management (e.g. add more prompt_fields to ask your users for
# more input values).


# This module defines and deploys an AWS Lambda to your AWS account. Its source code can
# be found in the `database_lambda_src` directory. By default,
# it does nothing except return a message saying that it was invoked successfully.
module "database_lambda_function" {
  source  = "terraform-aws-modules/lambda/aws"
  version = "~> 4.0.0"

  function_name = "database"
  description   = "A Lambda to be invoked on escalate and de-escalate Sym events"
  handler       = "handler.lambda_handler"
  runtime       = "python3.8"

  source_path = "${path.module}/database_lambda_src"
}

# This module defines the AWS IAM Resources that enable the Sym Runtime to invoke your
# AWS Lambda function defined above.
module "database_lambda_connector" {
  source  = "symopsio/lambda-connector/aws"
  version = ">= 1.0.0"

  environment = "database"
  lambda_arns = [module.database_lambda_function.lambda_function_arn]

  # The runtime_connector module is defined in `connectors.tf`.
  runtime_role_arns = [module.runtime_connector.sym_runtime_connector_role.arn]
}

# This Integration provides your Strategy the permissions needed to invoke your AWS Lambda.
# It points to to the AWS IAM resources created by the `database_lambda_connector` module.
resource "sym_integration" "database_lambda_context" {
  type = "permission_context"
  name = "database-lambda-context"

  external_id = module.database_lambda_connector.settings.account_id
  settings    = module.database_lambda_connector.settings
}

############ AWS Lambda Strategy Setup ##############

# A target AWS Lambda that will be invoked on escalate and de-escalate Sym events.
resource "sym_target" "database_lambda_function" {
  type = "aws_lambda_function"
  name = "mysql-lambda"

  settings = {
    # `type=aws_lambda_function` sym_targets have a required setting `arn`,
    # which must be the ARN of the AWS Lambda that will be invoked on escalate and de-escalate.
    arn = module.database_lambda_function.lambda_function_arn
  }
}

# The Strategy your Flow uses to manage access.
resource "sym_strategy" "database_lambda" {
  type = "aws_lambda"
  name = "database-lambda-strategy"

  integration_id = sym_integration.database_lambda_context.id
  targets        = [sym_target.database_lambda_function.id]
}

# A Sym Flow that executes an AWS Lambda on escalate and de-escalate Sym events.
resource "sym_flow" "database_lambda" {
  name = "database-lambda-access"

  implementation = file("${path.module}/impls/aws_lambda_database_access_impl.py")

  # The sym_environment resource is defined in `environment.tf`.
  environment_id = sym_environment.this.id

  params {
    # By specifying a strategy, this Flow will now be able to manage access (escalate/de-escalate)
    # to the Targets specified in the `sym_strategy` resource.
    strategy_id = sym_strategy.database_lambda.id

    # Each prompt_field defines a custom form field for the Slack modal that
    # requesters fill out to make their requests.
    prompt_field {
      name     = "reason"
      label    = "Why do you need access?"
      type     = "string"
      required = true
    }

    prompt_field {
      name           = "duration"
      type           = "duration"
      allowed_values = ["30m", "1h"]
      required       = true
    }

    prompt_field {
      name     = "database_role"
      label    = "Which database role do you need?"
      type     = "string"
      required = true
      prefetch = true
    }
  }
}
