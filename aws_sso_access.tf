# This file was generated by symflow CLI v8.0.2 on 2023-08-07 at 19:15 UTC.
# No changes to this file are required to start managing your AWS SSO access with Sym.
# Modify this file to customize your AWS SSO access management, or add more AWS SSO Permission Sets and
# AWS SSO Groups to be managed.

# Use a data resource to get the existing permission set's ARN
data "aws_ssoadmin_permission_set" "sso_access_AdminAccess" {
  provider = aws.sso

  # data.aws_ssoadmin_instances.this is defined in connectors.tf
  instance_arn = one(data.aws_ssoadmin_instances.this.arns)
  name         = "AdminAccess"
}

# An AWS SSO Permission Set Assignment target that your Sym Strategy can manage access to
resource "sym_target" "sso_access_permission_set_target" {
  type = "aws_sso_permission_set"

  name  = "sso-access-permission-set"
  label = "AdminAccess Permission Set"

  settings = {
    # `type=aws_sso_permission_set` sym_targets need both an AWS Permission Set
    # ARN and an AWS Account ID to make an SSO account assignment.
    permission_set_arn = data.aws_ssoadmin_permission_set.sso_access_AdminAccess.arn
    account_id         = "123456789"
  }
}

# Use a data resource to get the existing AWS SSO Group's Group ID
data "aws_identitystore_group" "sso_access_admin_sso_group" {
  provider = aws.sso

  # data.aws_ssoadmin_instances.this is defined in connectors.tf
  identity_store_id = one(data.aws_ssoadmin_instances.this.identity_store_ids)

  alternate_identifier {
    unique_attribute {
      attribute_path  = "DisplayName"
      attribute_value = "Admin SSO Group"
    }
  }
}

# An AWS SSO Group target that your Sym Strategy can manage access to
resource "sym_target" "sso_access_sso_group_target" {
  type  = "aws_sso_group"
  name  = "admin-sso-group"
  label = data.aws_identitystore_group.sso_access_admin_sso_group.display_name

  settings = {
    # `type=aws_sso_group` sym_targets have a required setting `group_id`,
    # which must be the AWS SSO Group ID the requester will be escalated to when this target is selected.
    group_id = data.aws_identitystore_group.sso_access_admin_sso_group.group_id
  }
}


# The Strategy your Flow uses to either:
#   - Create Account Assignments for combinations of AWS SSO Permission Sets and accounts.
#   - Add Users to AWS SSO Groups.
resource "sym_strategy" "sso_access_aws_sso" {
  type           = "aws_sso"
  name           = "sso-access-aws-sso-strategy"
  integration_id = sym_integration.aws_sso_context.id

  # This must be a list containing `aws_sso_permission_set` and/or `aws_sso_group` sym_targets that users
  # can request to be escalated to
  targets = [sym_target.sso_access_permission_set_target.id, sym_target.sso_access_sso_group_target.id]

  settings = {
    # data.aws_ssoadmin_instances.this is defined in connectors.tf
    instance_arn = one(data.aws_ssoadmin_instances.this.arns)
  }
}

resource "sym_flow" "sso_access_aws_sso" {
  name  = "aws-sso-access"
  label = "AWS SSO Access"

  implementation = file("${path.module}/impls/aws_sso_access.py")
  environment_id = sym_environment.this.id

  params {
    # By specifying a strategy, this Flow will now be able to manage access (escalate/de-escalate)
    # to the targets specified in the `sym_strategy` resource.
    strategy_id = sym_strategy.sso_access_aws_sso.id

    # Each prompt_field defines a custom form field for the Slack modal that
    # requesters fill out to make their requests.
    prompt_field {
      name     = "reason"
      label    = "Why do you need access?"
      type     = "string"
      required = true
    }

    prompt_field {
      name           = "duration"
      type           = "duration"
      allowed_values = ["30m", "1h"]
      required       = true
    }
  }
}
